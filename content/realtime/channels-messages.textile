---
title: Channels and Messages
section: realtime
index: 30
---

h2. Overview

The Ably Realtime service organises the traffic within any application into named channels. Channels are the
"unit" of message distribution; clients attach to channels to subscribe to messages, and every message broadcast
by the service is associated with a unique channel.

h3. Channel lifecycle

Channels are not pre-configured; they are created on demand when clients attach, and remain active until such time
that there are no remaining attached clients. Applications do have, however, the ability to pre-configure one or more
channel namespaces (ie name prefixes), and associated different attributes and access rights with those namespaces.

Clients attach to a channel in order to participate on that channel in any way (either to publish, subscribe, or be
present on the channel). Channel attach and detach operations are synchronous - after initiating an attach request,
the client must wait for a response that confirms that the channel is established on the service, and that the
client has the rights necessary to access the channel.

A number of states are therefore defined for a channel.

initialised
A channel object having this state has been initialised but no attach has yet been attempted.

pending
A attach has been initiated by sending a request to the service. This is a transient state; it will be followed either
by a transition to attached or failed.

attached
Attach has succeeded. In the attached state a client may publish, and subscribe to, messages.

detached
The channel, having previously been attached, has been detached.

failed
An indefinite failure condition. This state is entered if a channel error has been received from the Ably service
(such as an attempt to attach without the necessary access rights).

Although the attach operation can be initiated explicitly by a client, it is more common for the client to perform
a publish or subscribe operation, and the client library will initiate the attach if the channel is not already
attached. The client library allows clients to begin publishing messages to a channel as soon as the attach has
been initiated, and messages are queued until such time as the attach has succeeded or failed.

A client may register a listener in order to be notified of channel state changes.

h3. Message subscription

A message sent via the Ably Realtime service contains a payload, the message data, and optionally also has an
event name. The name does not affect the distribution of a channel message to clients but may be used as a filter
to allow a client to register a listener that only sees a subset of the messages on the channel. When subscribing,
a message listener can subscribe to see all messages on the channel or only a subset whose name matches a given
string.

h3. Channel namespaces

One or more channel namespaces, or channel name prefixes, may be configured for an app. When a channel is created
whose name is prefixed with one of the namespaces, the channel assumes certain configured attributes associated with
that namespace.

Namespace-prefixed names are delimited by a single colon ':'; the first component of the channel name (from the start
up to and including the last character before the colon) is the namespace. A channel name may validly contain a colon
even if the namespace component does not correspond to a namespace; also, a channel may contain multiple colons and
only the component up to the first colon will be matched with a namespace. The only restriction on channel names is
that a channel name may not start with a colon and may not be empty.

Namespaces are defined and configured via the application dashboard. Namespace attributes that can be configured are:
- whether or not channels belonging to that namespace require clients to be authenticated;
- whether or not channel messages are persisted;
- whether or not clients are required to be connected over a TLS connection.

Key or token capabilities can also specify access rights based on channel namespace.

h3. Message payload

An Ably Realtime Message has a data member carrying the payload of the message. Various primitive and object types are
portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different
languages or environments.

The supported payload types are primitive types (boolean, int32, double, string), JSON-encoded objects and arrays, and
buffers containing arbitrary binary data. Client libraries detect the supplied message payload and encode the message
appropriately.

h2. Methods

publish. Publish a message on this channel. A listener may optionally be passed in to this call to be notified of
success or failure of this operation.

subscribe. Subscribe to messages on this channel. Subscription may be to all messages, or only to messages with a
given event name. The caller supplies a js: callback java: an implementation of the MessageListener interface, which
is called each time one or more messages arrives on the channel.

unsubscribe. Unsubscribe to messages on this channel. This removes an earlier subscription (either global or for
a specific event name).

attach. Attach to this channel. This will be called implicitly when required if the client calls either publish()
or subscribe().

detach. Detach this channel.

h2. Members

state. Indicates the current state of this channel.

name. The channel name of the this channel.

presence. The presence object for this channel.

reason. Information relating to the transition to the current state, as an Ably ErrorInfo object. This contains an
error code and message and, in the failed state in particular, provides diagnostic error information.

java: stateListeners. A collection of listener objects that will be notified of channel state changes.
java: listeners. A collection of listener objects that will be notified of messages on this channel.
java: eventListeners. For each registered event name, a collection of listener objects that will be notified of
messages with that name on this channel.

h2. Listening for channel state changes.

Clients can listen for channel state changes by 
(java) adding an implementation of ChannelStateListener to the stateListeners collection.
(js) registering for any or all of the connection state events ('attached', 'failed' etc)
via the EventEmitter interface.

Listeners are passed the new state and, where applicable, supplementary information as an Ably ErrorInfo object.
