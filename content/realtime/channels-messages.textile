---
title: Channels and Messages
section: realtime
index: 30
jump_to:
  Help with:
    - Channels and messages#title
  Auth API reference:
    - requestToken
    - authorise
    - createTokenRequest
  Related types:
    - ChannelStateListener#channel-state-listener
    - MessageListener#message-listener
    - CompletionListener#completion-listener
---

h2. Overview

The Ably Realtime service organises the traffic within any application into named channels. Channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message broadcast by the service is associated with a unique channel.

h3. Channel lifecycle

Channels are not pre-configured; they are created on demand when clients attach, and remain active until such time that there are no remaining attached clients. Applications do have, however, the ability to pre-configure one or more channel namespaces (ie name prefixes), and associate different attributes and access rights with those namespaces.

Clients attach to a channel in order to participate on that channel in any way (either to publish, subscribe, or be present on the channel). Channel attach and detach operations are synchronous - after initiating an attach request, the client must wait for a response that confirms that the channel is established on the service, and that the client has the rights necessary to access the channel.

A number of states are therefore defined for a channel.

- initialised := A channel object having this state has been initialised but no attach has yet been attempted.

- pending := An attach has been initiated by sending a request to the service. This is a transient state; it will be followed either
by a transition to attached or failed.

- attached := Attach has succeeded. In the attached state a client may publish, and subscribe to, messages.

- detached := The channel, having previously been attached, has been detached.

- failed := An indefinite failure condition. This state is entered if a channel error has been received from the Ably service (such as an attempt to attach without the necessary access rights).

Although the attach operation can be initiated explicitly by a client, it is more common for the client to perform a publish or subscribe operation, and the client library will initiate the attach if the channel is not already attached. The client library allows clients to begin publishing messages to a channel as soon as the attach has been initiated, and messages are queued until such time as the attach has succeeded or failed.

h4. Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the @channels@ collection of the Ably @Realtime@ instance.

bc[javascript,nodejs]. var channel = realtime.channels.get('myChannel');

bc[java]. import io.ably.realtime.Channel;
Channel channel = realtime.channels.get("myChannel");

h4. Listening for state changes

<div lang="javascript,nodejs">
The @channel@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a channel state change. As with all events from an @EventEmitter@ in the Ably library, @this@ within the listener function is a reference to an event object whose @name@ property is the name of the event that fired. This allows a listener to listen for all events with a single registration and know, which event fired when it is entered.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.on('attached', function() {
  console.log('channel ' + channel.name + ' is now attached');
});
</code></pre>

Alternatively a listener may be registered so that it receives all state change events.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">var myListener = function() {
  console.log('New channel state is ' + this.name);
});
['attached', 'detached', 'failed'].forEach(function(event) {
  channel.on(event, myListener);
});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">/* remove a listener registered for a single event */
channel.off('attached', myListener);

/* remove a listener registered for all events */
channel.off(myListener);
</code></pre>

</div>

<div lang="java">
A client can register for connection state changes by implementing "ChannelStateListener":#channel-state-listener and adding it to the @stateListeners@ Collection. The listener is passed the new @ChannelState@ on each state change event together with reason or error information where available.

<pre lang="java"><code lang="java">channel.stateListeners.add(new ChannelStateListener() {
	@Override
	public void onChannelStateChanged(ChannelState state, ErrorInfo reason) {
		System.out.println("New state is " + state.name());
	}});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="java"><code lang="java">/* remove a single listener */
channel.stateListeners.remove(myListener);

/* remove all event listeners */
channel.stateListeners.clear();
</code></pre>

</div>

h3. Channel namespaces

One or more channel namespaces, or channel name prefixes, may be configured for an app. When a channel is created whose name is prefixed with one of the namespaces, the channel assumes certain configured attributes associated with that namespace.

Namespace-prefixed names are delimited by a single colon ':'; the first component of the channel name (from the start up to and including the last character before the colon) is the namespace. A channel name may validly contain a colon even if the namespace component does not correspond to a namespace; also, a channel may contain multiple colons and only the component up to the first colon will be matched with a namespace. The only restriction on channel names is that a channel name may not start with a colon and may not be empty.

Namespaces are defined and configured via the application dashboard. Namespace attributes that can be configured are:
* whether or not channels belonging to that namespace require clients to be authenticated;
* whether or not channel messages are persisted;
* whether or not clients are required to be connected over a TLS connection.

Key or token capabilities can also specify access rights based on channel namespace.

h2. Messages

An Ably Realtime Message has a @data@ member carrying the payload of the message. Various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are primitive types (boolean, int32, double, string), JSON-encoded objects and arrays, and buffers containing arbitrary binary data. Client libraries detect the supplied message payload and encode the message appropriately.

h3. Message subscription

A message sent via the Ably Realtime service contains a payload, the message @data@, and optionally also has an event @name@. The name does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages on the channel. When subscribing, a message listener can subscribe to see all messages on the channel or only a subset whose name matches a given @name@ string.

<div lang="javascript,nodejs">
A client can subscribe to all messages on a channel by passing a listener function to the @subscribe@ method.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.subscribe(function(message) {
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});
</code></pre>

Alternatively a listener may be registered so that it is called only for messages having a specific event name.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.subscribe('myEvent', function(message) {
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">/* remove a listener registered for a single event */
channel.unsubscribe('myEvent', myListener);

/* remove a listener registered for all events */
channel.unsubscribe(myListener);
</code></pre>

</div>

<div lang="java">
A client can register for messages on a channel by implementing "MessageListener":#message-listener and calling the @subscribe(MessageListener listener)@ or @subscribe(String eventName, MessageListener listener)@ method. The listener is passed the new @Message@ on each message.

<pre lang="java"><code lang="java">channel.subscribe(new MessageListener() {
	@Override
	public void onMessage(Message[] messages) {
		System.out.println(messages.length " new messages arrived");
	}});
</code></pre>

Alternatively a listener may be registered so that it is called only for messages having a specific event name.

<pre lang="java"><code lang="java">channel.subscribe("myEvent", new MessageListener() {
	@Override
	public void onMessage(Message[] messages) {
		System.out.println(messages.length " new messages arrived");
	}});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="java"><code lang="java">/* remove a single listener */
channel.unsubscribe(myListener);

/* remove a listener registered for all events */
channel.unsubscribe("myEvent", myListener);
</code></pre>

</div>

h3. Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel. A listener optionally passed in to the @publish@ method enables the client to know whether or not the operation succeeded.

bc[javascript,nodejs]. channel.publish("myEvent", "This is my message", function(err) {
  if(err)
    console.log('Unable to publish message; err = ' + err.message);
  else
    console.log('Message successfully sent');
});

bc[java]. import io.ably.realtime.CompletionListener;
channel.publish("myEvent", "This is my message", new CompletionListener() {
	@Override
	public void onError(ErrorInfo reason) {
		System.out.println("Unable to publish message; err = " + reason.message);
	}			
	@Override
	public void onSuccess() {
		System.out.println("Message successfully sent");
	}
});

h2. Methods

h6(#publish-data)[default]. publish(name, data, callback)

h6(#publish-data)[java]. public void publish(String name, Object data, CompletionListener listener)

Publish a single message on this channel based on a given event name and payload.

h6(#publish-msg)[default]. publish(message, callback)

h6(#publish-msg)[java]. public void publish(Message message, CompletionListener listener)

Publish a single message object on this channel.

h6(#publish-msg-array)[default]. publish(messages, callback)

h6(#publish-msg-array)[java]. public void publish(Messages messages, CompletionListener listener)

Publish several messages on this channel.

publish. Publish a message on this channel. A listener may optionally be passed in to this call to be notified of success or failure of this operation.

subscribe. Subscribe to messages on this channel. Subscription may be to all messages, or only to messages with a given event name. The caller supplies a js: callback java: an implementation of the MessageListener interface, which is called each time one or more messages arrives on the channel.

unsubscribe. Unsubscribe to messages on this channel. This removes an earlier subscription (either global or for a specific event name).

attach. Attach to this channel. This will be called implicitly when required if the client calls either publish() or subscribe().

detach. Detach this channel.

h2. Public members

A @Channel@ object exposes the following public members.

- <span lang="java">public ChannelState</span>state := Indicates the current state of this channel.

- <span lang="java">public String</span>name := The channel name of the this channel.

- <span lang="java">public Presence</span>presence := The "presence":/realtime/presence object for this channel.

- <span lang="java">public ErrorInfo</span>reason := Information relating to the transition to the current state, as an Ably @ErrorInfo@ object. This contains an error code and message and, in the failed state in particular, provides diagnostic error information.

- <div lang="java">stateListeners</div> := A collection of "ChannelStateListener":#channel-state-listener objects that will be notified of channel state changes.

