---
title: Presence
section: realtime
index: 40
---

h2. Overview

Ably Channels support the concept of presence. Each channel may have a presence set associated with it, which
is a set of clientIds for those clients that have announced their presence by enter()ing the channel.

A client must be attached to a channel, and must have the relevant permission, in order to enter, although the
library implicitly calls attach() if the client is not attached at the time enter() is called. As with other
channel messages, the library allows presence messages to be submitted immediately, and these are queued
until such time as the channel is attached, or the attach fails (or the connection fails). Ably maintains
the presence set for each channel, broadcasts enter/leave events to all subscribed clients, and allows clients
to query to obtain the set of present clients at any time.

A client that has access to presence state for a channel is passed the current presence state once it attaches.

A client's clientId must be authenticated in order that the client may enter a channel. This means either that
the client connects using basic auth (a client in possession of a key can uphold any claimed identity) or using
a token that has been issued for that clientId.

A given clientId might be present multiple times, via different connections. As far as Ably is concerned these
are different members of the presence set. A member of the presence set is, therefore, the combination of a
clientId string and a memberId string unique to a connection.

Each member entering a presence channel may include a payload in the clientData attribute of the PresenceMessage
and this is then included in the presence updates broadcast to subscribed clients. Clients can update this
clientData whilst being members of the channel; each PresenceMessage is therefore one of three types: enter,
leave and update.

The client library does not itself track the presence state of the member it represents; a client may send a
leave or update event, for example, without having previously entered via that client instance. This is because
that same clientId might have entered the channel on an earlier connection, and the present connection, having
inherited from that earlier connection, will adopt that clientId/memberId combination.

The Ably service tracks members presence as clients detach from channels and as connections are dropped, generating
leave events as appropriate.

h2. Methods

enter. Enter this presence channel. The Ably library must have been initialised with a clientId, and must have
been supplied either with a key, or a token bound to that clientId. This method sends a PresenceMessage for
the client's clientId and optional clientData.

enterClient. Enter this presence channel for the given clientId. This method is provided to support connections
(eg connections from application server instances) that act on behalf of multiple clientIds. In order to be able
to enter the channel with this method, the client library must have been instanced either with a key, or with a
token bound to the wildcard clientId.

update. Update the clientData for this member in the presence channel. The Ably library must have been initialised
with a clientId, and must have been supplied either with a key, or a token bound to that clientId. This method
sends a PresenceMessage with the update action and updated clientData.

updateClient. This is the analogue of enterClient, for the update action.

leave. Leave this presence channel. This is subject to the same authentication requirements as the enter method
above.

leaveClient. This is the analogue of enterClient, for the leave action.

subscribe. Subscribe to presence messages for this presence channel. The caller must supply an implementation of
the PresenceMessageListener interface.

unsubscribe. Remove a previously subscribed listener.

get. Obtain the current presence set for this channel.