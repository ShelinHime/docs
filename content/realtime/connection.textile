---
title: Connection
section: realtime
index: 2
classes:
  Ably.Realtime object:
    - Constructor
    - Methods:
      - Connect
      - Disconnect
    - Attributes:
      - Connected
  Connection object:
    - Constructor
    - Methods:
      - Subscribe
      - Unsubscribe
    - Attributes:
      - Connections
---

h1. Ably Object Reference

Top-level Ably interface

The Ably interface is the entry point to the API. A caller will first create an instance of the Ably interface. The Ably instance obtained is then used to publish and subscribe to events.

h2(#constructor). Constructor

bq. Ably.Realtime("AblyOption":/realtime/types#ablyoption options)

Constructs an instance of the Ably interface, which succeeds without blocking, and then asynchronously triggers an attempt to connect to the service. The state of the connection at any time can be observed via the connection property.

h4. Parameters

- options := options for this connection, refer to "AblyOption":/realtime/types#ablyoption

h4. Example

bc[javascript]. var ably = new Ably('juewrhdfusddsasf');

bc[java]. String id = ACCOUNT_ID;
AblyOptions opts = new AblyOptions();
opts.id = id;
opts.encrypted = true;
Ably ably = new Ably(opts);

bc[python]. x.counter = 1
while x.counter < 10:
  x.counter = x.counter * 2
print x.counter
del x.counter

Some other element here

bc[javascript]. var ably = new Ably('juewrhdfusddsasf');

Example where some documentation only applies to a particular language

p[other]. Some text that applies to all other languages

p[python]. Some python text here

p[javascript]. Some text that applies to Javascript and Java and Node

h2(#methods). Methods

h6(#disconnect). disconnect

bq. void disconnect()

This method closes the connection to the Ably service. No further events are delivered, and any published events that have not yet been indicated as delivered are liable to be discarded. After calling this method, it is not possible to reconnect using this Ably instance.

If @disconnect@() is called whilst in the unavailable state, then the disconnected state is entered, and there are no further attempts to establish the connection.

If @disconnect@() is called whilst in the disconnected or failed states, then it silently does nothing.

h6(#connect). connect

bq. Channel subscribe(String channel, "CompletionListener":/realtime/types#completionlistener listener, "SubscribeOptions":/realtime/types#subscribeoptions);

p(tip). Here is a tip that we show the user about this particular area of the API documentation

This method opens the connection to the Ably service when a connection has not been explicitly opened.  A connection is not opened automatically if no authenticaiton details are provided in the @options@ of the @Ably.Realtime@ constructor.

h4. Parameters

- channel := the name of the channel
- listener := a listener to be notified of the success or failure of the request
- options := the options for this channel subscription

h2(#attributes). Attributes

h6(#connected). connected

bq. boolean connected

Returns true if a connection to the Ably service is established.
