---
title: Connection
section: realtime
index: 20
---

h2. Overview

The Ably Realtime library establishes and maintain a connection to the Ably service. The Ably realtime protocol
operates over that connection, and all channel traffic is multiplexed over that connection.

Within the Ably system and protocol, all connection state is temporary; the protocol provides continuity of
message delivery between the client and the service, and continuity of other connection state, provided that a
dropped connection is reestablished within a limited interval (typically around 1 minute). Beyond that, the
connection state is stale and the system will not attempt to make a transparent connection recovery. The lifecycle
of a connection, and the strategy for reconnecting on failure, reflect the transient nature of the connection
state.

The library's ConnectionManager is responsible for managing the connection; this includes selecting a transport
(in those environments supporting multiple transports), selecting a host to connect to (selecting a fallback host
if the principal Ably host is unreachable), and managing continuity of operation when the connection drops.

If connectivity to the service is available, the library will establish a connection immediately, and if the
connection drops at any time it will attempt to re-establish it by making repeated connection attempts every 15
seconds for up to two minutes.

If, after that time, there has been no connection, the library falls back to a lower level of activity, still
periodically attempting reconnection but at two minute intervals. This reflects the assumption that there will no
longer be recoverable connection state and may be offline for a period of time. As soon as a reconnection attempt
has been successful, the system reverts to the more active connection behaviour. Further, a client can explicitly
trigger a reconnection attempt at any time, and does not need to wait for the timeout if it wishes to implement a
different strategy.

The connection object provides methods to observe the lifecycle of the connection and to trigger certain state
transitions.

h3. Connection states

A series of connection states is defined.

initialised
A connection object having this state has been initialised but no connection has yet been attempted.

connecting
A connection attempt has been initiated. The connecting state is entered as soon as the library has completed
initialisation, and is reentered each time connection is re-attempted following disconnection.

connected
A connection exists and is active.

disconnected
A temporary failure condition. No current connection exists because there is no network connectivity or no host
is unavailable.

The disconnected state is entered if an established connection is dropped, or if a connection attempt was
unsuccessful. In the disconnected state the library will trigger a new connection attempt after a short period,
anticipating that the connection will be re-established soon, and connection continuity will be possible. Clients
can continue to publish messages, and these will be queued, to be sent as soon as a connection is established.

suspended
A long term failure condition. No current connection exists because there is no network connectivity or no host
is unavailable.

The suspended state is entered after a failed connection attempt if there has then been no connection for a period
of two minutes. A new connection attempt will be triggered after a further two minutes. In the suspended state
clients are unable to publish messages. A new connection attempt can also be triggered by an explicit call to
connect() on the connection object.

closed
The connection has been explicitly closed by the client.

In the closed state, no reconnection attempts are made automatically by the library, and clients may not publish
messages. No connection state is preserved by the service or by the library. A new connection attempt can be triggered
by an explicit call to connect() on the connection object, which will result in a new connection.

failed
An indefinite failure condition. This state is entered if a connection error has been received from the Ably service
(such as an attempt to connect with a non-existent appId or with invalid credentials). A failed state may also be
triggered by the client library directly as a result of some local permanent error.

In the failed state, no reconnection attempts are made automatically by the library, and clients may not publish
messages. A new connection attempt can be triggered by an explicit call to connect() on the connection object.

h4. Example state sequences

The library is initialised and initiates a successful connection.

initialised --> connecting --> connected

An existing connection is dropped and reestablished on the first attempt.

connected --> disconnected --> connecting --> connected

An existing connection is dropped, and reestablished after several attempts but within a two minute interval

connected --> disconnected --> (connecting --> disconnected -->)+ connecting --> connected

There is no connection established after initialising the library

initialised --> (connecting --> disconnected -->)+ connecting --> suspended

After a period of being offline a connection is reestablished.

suspended --> (connecting --> suspended -->)+ connecting --> connected

h2. Methods

connect. Causes the library to re-attempt connection, if it was previously explicitly closed by the user, or was closed as
a result of an unrecoverable error.

close. Causes the connection to close, entering the closed state, from any state except the failed state. Once closed, the
library will not attempt to re-establish the connection without a call to connect().

h2. Members

state. Indicates the current state of this connection.

id. The (String) id of the current connection. This string may be used when recovering connection state.

serial. The serial number of the last message received on this connection. The serial number may be used when
recovering connection state.

reason. Information relating to the transition to the current state, as an Ably ErrorInfo object. This contains an
error code and message and, in the failed state in particular, provides diagnostic error information.

java: listeners. A collection of listener objects that will be notified of connection state changes.

h2. Listening for state changes.

Clients can listen for state changes by 
(java) adding an implementation of ConnectionStateListener to the listeners collection.
(js) registering for any or all of the connection state events ('connecting', 'connected' etc)
via the EventEmitter interface.

Listeners are passed a ConnectionStateChange object containing:

previous (state): the previous state;
current (state): the new state;
reason (ErrorInfo): any information relating to the transition
retryIn (long): the time in milliseconds, relative to the present time, at which the library will retry.

h3. Code examples.

