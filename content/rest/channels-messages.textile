---
title: Channels & Messages
section: rest
index: 20
---

In the REST client library, a @Channel@ object must be obtained in order to make calls to the channel-specific routes in the REST API:

bc[javascript,nodejs]. var Rest = new Ably.Rest(options),
    channel = Rest.channels.get('channel0');

bc[ruby]. rest = Ably::Rest.new(options)
channel = rest.channels.get('channel0')

A shortcut method is also provided to retrieve a @Channel@:

bc[javascript]. var channel = Rest.channel('channel0');

bc[ruby]. channel = Rest.channel('channel0')

The channel-specific calls in the client library directly mirror the "REST API":/rest-api.

h1. Channel Object Reference

h2. Methods

h6. publish

bq. <span lang="javascript">channel.publish(event, data, callback)</span><span
          lang="ruby">channel.publish(event, data) → success</span>

This call queries the REST "@/apps/<app id>/channels/<channel id>/publish@":/rest-api/#publish API.

h4. Parameters

- event := the name of the event to publish
- data := the message payload
- <div lang="javascript">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api/#common documentation</li>
<li>On success, @result@ contains the object returned in the response body, which may be empty.</li>
</ul>

<div lang="ruby">
h4. Returns

Returns @true@ if successful.  Failure to publish will raise an exception - typical publishing exceptions include:

* @Ably::NetworkError@
* @Ably::QuotaExceeded@
* @Ably::AuthenticationFailure@
</div>

h6. history

bq. <span lang="javascript">channel.history(options, callback)</span><span
          lang="ruby">channel.history(options) → history_json</span>

This call queries the REST "@/apps/<app id>/channels/<channel id>/history@":/rest-api/#channel-history API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api/#channel-history.
- <div lang="javascript">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api/#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#channel-history</li>
</ul>

<div lang="ruby,java">
h4. Returns

Returns JSON in format described in the REST "@/apps/<app id>/channels/<channel id>/history@":/rest-api/#channel-history API.

Example:

bc[json]. {
  name: <event name>,
  channel: <channel id>,
  data: <message payload>,
  timestamp: <message timestamp>
}

</div>

<!-- break language group -->
<span class="breaker"></span>

<div lang="ruby">
Failure to retrieve the history will raise an exception - typical exceptions include:
* @Ably::NetworkError@
* @Ably::AuthenticationFailure@
* @Ably::InvalidParameters@
</div>

h6. stats

bq. channel.stats(options, callback)

This call queries the REST "@/apps/<app id>/channels/<channel id>/stats@":/rest-api/#channel-stats API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api/#channel-stats.
- callback := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api/#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#channel-stats</li>
</ul>

h6. presence

bq. channel.presence(options, callback)

This call queries the REST "@/apps/<app id>/channels/<channel id>/presence@":/rest-api/#presence API.

Detailed description TBD.