---
title: Authentication
group: Client Library
section: rest
index: 10
---

h1. REST Client library > Authentication

The REST client library provides the ability to issue tokens using the the "@requestToken@ endpoint":/rest/rest#requesttoken, and also provides a number of helper functions to simplify the use of the authentication API.

As explained in the "constructor documentation":/rest/usage#constructor, the REST library would typically be instanced with either a @key@ or a @token@ option, and these given credentials are used to authenticate requests made by the library. In this situation, the library assumes responsibility for authentication operations, calling any @authUrl@ or @authCallback@ as needed. REST operations, such as publication of messages, or retrieval of message history or stats, can then proceed using the given credentials with no need to make further calls to the auth-specific functionality in the library.

The principal use-case for @auth@ object is to make requests for tokens to issue to other clients. A subsidiary use-case is to preemptively trigger renewal of a token or to acquire a new token with a revised set of capabilities.

h2. Rest.auth object

The Auth object is available as a static property of the Rest object.

bc[javascript]. var Rest = new Ably.Rest(options),
    Rest.auth.<method>

bc[ruby]. rest = Ably::Rest.new(options)
rest.auth.<method>

h3. Methods

h6(#requesttoken). requestToken

bq. Rest.auth.requestToken(options, callback)

Calls the "@requestToken@ endpoint":/rest/rest#requesttoken to obtain a token according to the specified options.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest/spec#requesttoken and "described below":#requesttokenoptions.
- callback := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest/spec#common documentation</li>
<li>On success, @result@ contains the response object as documented in "Authentication":/authentication, which is of the form:
<pre lang="json">@{
  id: <token value>,
  issued_at: <timestamp>,
  expires: <timestamp>,
  capability: <canonical capability text>,
  client_id: <client id>, (optional)
}@</pre>


</li>
</ul>

h4(#requesttokenoptions). Options

The options supported by @requestToken()@ are as follows. Note that in many cases these options may be used to override the corresponding options given at the time the library is instanced.

- keyId := (optional, overrides instance-wide value) The id of the key to use.
- keyValue := (optional, overrides instance-wide value) The secret value of the key; if not specified, a key passed in constructing the REST interface will be used; or if no key is available, a token request callback or url will be used.
- authCallback := (optional, overrides instance-wide value) A Javascript callback to be used, passing a set of token request params, to get a signed token request.
- authUrl := (optional, overrides instance-wide value) A URL to be used to GET or POST a set of token request params, to obtain a signed token request.
- authHeaders := (optional, overrides instance-wide value) A set of application-specific headers to be added to any request made to the authUrl.
- authParams := (optional, overrides instance-wide value) A set of application-specific query params to be added to any request made to the authUrl.
- expires := (optional) The requested life of the token in seconds. If none is specified a default of 1 hour is provided. The maximum lifetime is 24hours; any request exceeding that lifetime will be rejected with an error.
- capability := (optional) The capability to associate with the access token. If none is specified, a token will be requested with all of the capabilities of the specified key.
- clientId := (optional, overrides instance-wide value) A client Id to associate with the token.
- timestamp := (optional) The time in seconds since the epoch. If none is specified, the system will be queried for a time value to use.
- queryTime := (optional) Boolean indicating that the Ably system should be queried for the current time when none is specified explicitly. Use this option for platforms that do not have a sufficiently accurate local time source available.

h6(#authorise). authorise

bq. Rest.auth.authorise(options, callback)

Ensures valid auth credentials are present. This may rely on an already-known and valid token, and will obtain a new token if necessary or explicitly requested.

h4. Options

All of the options permitted for "@requestToken@":requesttoken are supported, plus the following additional option.

- force := (optional) Boolean indicating that a new token should be requested, even if a current token is still valid.

h6(#createtokenrequest). createTokenRequest

bq. Rest.auth.createTokenRequest(options, callback)

Creates and signs a token request based on the given options. Note this can only be used when the key value is available locally. Otherwise, signed token requests must be obtained from the key owner (either using the token request callback or url). Use this to generate signed token requests in order to implement a token request callback for use by other clients.

h4. Parameters

- options := an optional object containing the query parameters, as "specified below":#createtokenrequestoptions.
- callback := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest/spec#common documentation.</li>
<li>On success, @result@ contains the signed token request text response object as documented in "Authentication":/authentication.</li>
</ul>

h4(#createtokenrequestoptions). Options

- keyId := (optional, overrides instance-wide value) The id of the key to use.
- keyValue := (optional, overrides instance-wide value) The secret value of the key; if not specified, a key passed in constructing the REST interface will be used; or if no key is available, a token request callback or url will be used.
- expires := (optional) The requested life of the token in seconds. If none is specified a default of 1 hour is provided. The maximum lifetime is 24hours; any request exceeding that lifetime will be rejected with an error.
- capability := (optional) The capability to associate with the access token. If none is specified, a token will be requested with all of the capabilities of the specified key.
- clientId := (optional, overrides instance-wide value) A client Id to associate with the token.
- timestamp := (optional) The time in seconds since the epoch. If none is specified, the system will be queried for a time value to use.
- queryTime := (optional) Boolean indicating that the Ably system should be queried for the current time when none is specified explicitly. Use this option for platforms that do not have a sufficiently accurate local time source available.