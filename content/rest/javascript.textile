---
title: Javascript lib
section: rest
---

+Overview

The REST library for Javascript targets node.js clients and servers. It is obtainable as a module direcly from npm using

[[code]]
npm install ably-js
[[/code]]

The ably-js module contains both REST and Realtime libraries, and the REST library is a subset of Realtime; however, each is exported separately by the module:

[[code]]
var Ably = require('ably-js');
[[/code]]

Then the REST constructor is at {{Ably.Rest}}; the Realtime constructor is at {{Ably.Realtime}}. The Realtime object is documented under [[[Realtime Library for Javascript]]].

++ Construction

Operations are performed after first constructing the library:

[[code]]
var Rest = new Ably.Rest(options)
[[/code]]

The Rest library may be instanced multiple times with different options in any given context.

The set of all supported options is given below.


+++ Essential options

The REST library needs to know the application identifier, or {{appId}}, and also requires credentials or other information required to be able to authenticate to the Ably service. The application id can be specified explicitly with an {{appId}} option, or is more typically given implicitly by passing a {{key}} or {{token}} option when constructing the library.

The {{key}} option takes a key string, as obtained from the application dashboard. Use this option if you wish to use Basic authentication, or if you want to be able to request tokens without needing to defer to a separate entity to sign token requests. Note that initialising the library with a {{key}} does not necessarily mean that the library will use Basic auth; but knowing the key it is able to create and sign token requests and use token authentication when appropriate.

The {{token}} option takes a token string, and assumes the token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token, without the means for refreshing it. The {{authUrl}} and {{authCallback}} options are provided to allow a user of the library to issue new token requests as required; these options even permit the library to be instanced without either {{key}} or {{token}}, and an initial token will be obtained when required.

||~ Option ||~ Description ||
|| appId || The application id. This option is only required if the application id cannot be inferred either from a {{key}} or {{token}} option. If given, it is the application id as indicated on the application dashboard. ||
|| key || The full key string, as obtained from the application dashboard. Use this option if you wish to use Basic auth, or wish to be able to issue tokens without needing to defer to a separate entity to sign token requests.||
|| token || A token string, as the value of the {{id}} property of a {{token_details}} component of a token response. ||
|| authCallback || A Javascript function to call when a new token is required. The role of the callback is to generate a signed //token request// this is then submitted by the library to the {{requestToken}} API. See below for the callback function signature. ||
|| authUrl || A URL that the library may use to obtain a signed token request. This can be used by a client to obtain signed token requests from an application server, for example. ||
|| authHeaders || A set of headers to be added to any request made to the {{authUrl}}. An application require these to be added to validate the request or implement the response. ||
|| authParams || A set of query params to be added to any request made to the {{authUrl}}. An application require these to be added to validate the request or implement the response. ||

+++ Other options

The following further options are supported by the library.

||~ Option ||~ Description ||
|| encrypted || A boolean value, indicating whether or not a TLS ("SSL") secure connection should be used. If not specified, it defaults to {{false}}, or in the case of the browser client, to the state of the document that loaded the library. Note that unpaid Ably accounts are unable to use encrypted Realtime connections. ||
|| clientId || A client id, used for identifying this client for presence purposes. The clientId can be any string. This option is primarily intended to be used in situations where the library is instanced with a key; note that a clientId may also be implicit in a token used to instance the library; an error will be raised if a clientId specified here conflicts with the clientId implicit in the token. ||
|| log || Parameters to control the log output of the library. The supplied value must be an object that may contain one or both of the following entries: {{level}}: a number controlling the verbosity of the output from 1 (minimum, errors only) to 4 (maximum); {{handler}}: a function to handle each line of log output. If {{handler}} is not specified, {{console.log}} is used. ||
|| transports || An array of transports to use, in descending order of preference. The available transports are: {{web_socket}}, {{flash_socket}}, {{xhr}}, {{jsonp}}. The default is to try all available transports among those listed, in that order. ||

+ Token generation and the {{auth}} object

The REST client library provides the ability to access the {{requestToken}} endpoint, and also provides a number of helper functions to simplify the use of the API.

As explained in the overview, the REST library would typically be instanced with either a {{key}} or a {{token}} option, and these given credentials are used to authenticate requests made by the library. In this situation, the library assumes responsibility for authentication operations, calling any {{authUrl}} or {{authCallback}} as needed. REST operations, such as publication of messages, or retrieval of message history or stats, can then proceed using the given credentials with no need to make further calls to the auth-specific functionality in the library.

The principal use-case for {{auth}} object is to make requests for tokens to issue to other clients. A subsidiary use-case is to preemptively trigger renewal of a token or to acquire a new token with a revised set of capabilities.

++ Rest.auth.requestToken(options, callback)

Calls the {{requestToken}} endpoint to obtain a token according to the specified options. The supported options are listed below.

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response, in the following form:

[[code]]
{
    code: <Ably error code>,
    reason: <reason string>,
    statusCode: <response status code>
}
[[/code]]

(For more information about the possible error codes, refer to the [[[REST API]]] documentation.

On success, {{result}} contains the response object as documented in [[[Authentication]]], which is of the form:

[[code]]
{
  id: <token value>,
  issued_at: <timestamp>,
  expires: <timestamp>,
  capability: <canonical capability text>,
  client_id: <client id>, (optional)
}
[[/code]]

+++ Options

The options supported by {{requestToken()}} are as follows. Note that in many cases these options may be used to override the corresponding options given at the time the library is instanced.
||~ Option ||~ Description ||
|| keyId || (optional, overrides instance-wide value) The id of the key to use. ||
|| keyValue|| (optional, overrides instance-wide value) The secret value of the key; if not specified, a key passed in constructing the REST interface will be used; or if no key is available, a token request callback or url will be used. ||
|| authCallback || (optional, overrides instance-wide value) A Javascript callback to be used, passing a set of token request params, to get a signed token request. ||
|| authUrl || (optional, overrides instance-wide value) A URL to be used to GET or POST a set of token request params, to obtain a signed token request. ||
|| authHeaders || (optional, overrides instance-wide value) A set of application-specific headers to be added to any request made to the authUrl. ||
|| authParams || (optional, overrides instance-wide value) A set of application-specific query params to be added to any request made to the authUrl. ||
|| expires || (optional) The requested life of the token in seconds. If none is specified a default of 1 hour is provided. The maximum lifetime is 24hours; any request exceeding that lifetime will be rejected with an error. ||
|| capability || (optional) The capability to associate with the access token. If none is specified, a token will be requested with all of the capabilities of the specified key. ||
|| clientId || (optional, overrides instance-wide value) A client Id to associate with the token. ||
|| timestamp || (optional) The time in seconds since the epoch. If none is specified, the system will be queried for a time value to use. ||
|| queryTime || (optional) Boolean indicating that the Ably system should be queried for the current time when none is specified explicitly. Use this option for platforms that do not have a sufficiently accurate local time source available. ||

++ Rest.auth.authorise(options, callback)

Ensures valid auth credentials are present. This may rely in an already-known and valid token, and will obtain a new token if necessary or explicitly requested.

+++ Options

All of the options permitted for {{requestToken}} are supported, plus the following additional option.

||~ Option ||~ Description ||
|| force || (optional) Boolean indicating that a new token should be requested, even if a current token is still valid. ||

++ Rest.auth.createTokenRequest(options, callback)

Creates and signs a token request based on the given options. Note this can only be used when the key value is available locally. Otherwise, signed token requests must be obtained from the key owner (either using the token request callback or url). Use this to generate signed token requests in order to implement a token request callback for use by other clients.

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains the signed token request text response object as documented in [[[Authentication]]].

+++ Options

The following options are supported.

||~ Option ||~ Description ||
|| keyId || (optional, overrides instance-wide value) The id of the key to use. ||
|| keyValue|| (optional, overrides instance-wide value) The secret value of the key; if not specified, a key passed in constructing the REST interface will be used; or if no key is available, a token request callback or url will be used. ||
|| expires || (optional) The requested life of the token in seconds. If none is specified a default of 1 hour is provided. The maximum lifetime is 24hours; any request exceeding that lifetime will be rejected with an error. ||
|| capability || (optional) The capability to associate with the access token. If none is specified, a token will be requested with all of the capabilities of the specified key. ||
|| clientId || (optional, overrides instance-wide value) A client Id to associate with the token. ||
|| timestamp || (optional) The time in seconds since the epoch. If none is specified, the system will be queried for a time value to use. ||
|| queryTime || (optional) Boolean indicating that the Ably system should be queried for the current time when none is specified explicitly. Use this option for platforms that do not have a sufficiently accurate local time source available. ||

+ Application routes

The REST client library provides a convenient way to make calls to the history- and stats-related routes in the REST API.

++ Rest.history(options, callback)

This call queries the REST {{/apps/<app id>/history}} API.

{{options}} is an optional object containing the query parameters, as specified in the [[[REST API]]].

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains an array of results whose type corresponds to the result type for the request granularity as specified in [[[REST API]]].

++ Rest.stats(options, callback)

This call queries the REST {{/apps/<app id>/stats}} API.

{{options}} is an optional object containing the query parameters, as specified in the [[[REST API]]].

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains an array of results whose type corresponds to the result type for the request granularity as specified in [[[REST API]]].

+ Channels

In the REST client library, a Channel object must be obtained in order to make calls to the channel-specific routes in the REST API:

[[code]]
var channel = Rest.channels.get('channel0');
[[/code]]

The channel-specific calls in the client library directly mirror the API.

++ channel.history(options, callback)

This call queries the REST {{/apps/<app id>/channels/<channel id>/history}} API.

{{options}} is an optional object containing the query parameters, as specified in the [[[REST API]]].

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains an array of results whose type corresponds to the result type for the request granularity as specified in [[[REST API]]].

++ channel.stats(options, callback)

This call queries the REST {{/apps/<app id>/channels/<channel id>/stats}} API.

{{options}} is an optional object containing the query parameters, as specified in the [[[REST API]]].

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains an array of results whose type corresponds to the result type for the request granularity as specified in [[[REST API]]].

++ channel.presence(options, callback)

This call queries the REST {{/apps/<app id>/channels/<channel id>/presence}} API.

Detailed description TBD.

++ channel.publish(event, data, callback)

This call queries the REST {{/apps/<app id>/channels/<channel id>/publish}} API.

{{event}} is the name of the event to publish.

{{data}} is the message payload.

{{callback}} is a function of the form:

[[code]]
callback(err, result)
[[/code]]

where:

{{err}} contains an error value on the case of an error response as defined in the [[[REST API]]] documentation.

On success, {{result}} contains the object returned in the response body, which may be empty.