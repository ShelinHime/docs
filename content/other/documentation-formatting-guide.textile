---
title: Documentation Formatting Guide
section: footer
index: 60
---

Keeping documentation relevant, concise and up to date is very important to us.  As such, we have ensured that updating and writing documentation for Ably is a simple process for Ably staff and developers, and even our customers and partners.  We welcome you to fork "this documentation repository":http://github.com/ably/ably.github.com, update the documentation as you see fit, and send us your pull requests so we can incorporate your changes.

Please see this "documentation repository's README":http://github.com/ably/README.md for details on how to fork this repo, make changes, and send pull requests back to Ably.  From a high level, the documentation within "this repository":http://github.com/ably/ably.github.com is used to generate a static site hosted at "http://ably.github.com":http://ably.github.com, which is subsequently imported into the "primary Ably website documentation":https://ably.io/documentation periodically.  All documentation is formatted using "Textile markup":http://redcloth.org/textile.  Please refer to "http://redcloth.org/textile":http://redcloth.org/textile for a complete Textile reference.

Detailed below are specific Ably layout techniques that you should be aware of when writing documentation.  All standard Textile markup is supported in addition to what is documented below.

h2. Meta data

At the top of each textile page, the following meta data can be included as follows:

bc[text]. ---
title: [Enter a title that will appear in the navigation and HTML page title]
section: [Specify either rest|realtime|other|none to assign to nav on the left]
index: [Optional integer position within the nav, 0 reserved for section index/home]
classes: [Optional YAML that is used to generate an inline navigation in the format:
  Main section:
    - Child 1#anchor-link-id (links to #anchor-link-id)
    - Child 2:
      - Child 3 (automatically generates link #child-3 from 'Child 3')
]

See the "REST Spec":/rest/rest for an example of an inline navigation.

h2. Style guide

h3. Headings

The title of the page is automatically inserted into the page using a @h1.@ tag.  A simple breadcrumb navigation will be shown if the page has an index other than zero, and a page with index 0 exists.

@h1.@ used to indicate a new section such as the API reference, the title will be used within the in-context navigation.  The first paragraph that follows will always contain larger text.  You can continue this larger style by using a @p(larger).@ tag.
@h2.@ used for the key secondary headings on a page, and will be used within the in-context navigation.
@h3.@ used for the key tertiary headings, all paragraph text that follows is indented
@h4.@ to @h5.@ used for further headings decreasing in emphasis used in a typical hierarchical fashion
@h6.@ used to designate a definition or reference, see "REST history section in maroon":/rest/rest#history for an example of how this is used

@h[1-6](#anchor-id).@ used with any heading tag to add an HTML ID that can be linked to using anchor tags

h3. Documentation links

Absolute reference links such as @"Google":http://www.google.com@ can be used as normal.

All links to other documentation pages must follow the format @"REST Channels":/rest/channels"@ and must resolve to a relative path for this repository.  When imported into the main Ably website, the links will be automatically modified to link to the correct page in the Ably webite documentation.
Anchor links can be used as follows @"REST spec stats":/rest/rest#stats@.

Links can also contain mono-spaced code references within the link using the format <notextile><code>"@mono-spaced-link-text@":/rest/channels</code></notextile>, which would appear as "@mono-spaced-link-text@":/rest/channels

h3. Code blocks

Simple code keywords inline within your content are used commonly by wrapping them the @ symbol.  For example <notextile><code>@method@</code></notextile> is presented as @method@.

For all code blocks, a language in lowercase must be specified.  Languages currently supported are @javascript@, @json@, @python@, @ruby@, @java@, @ios@, @csharp@, @c@, @cplusplus@, @sh@ _(for shell scripts)_, @html@.  A code block must be prefixed and suffixed with a line break, and must use the following syntax:

bc[text]. bc[javascript]. var a = 1;
a += 1;

Note, if multiple code blocks appear underneath each other with different languages, then a language selector will appear for the page.  For example, the following Textile:

bc[text]. bc[javascript]. var a = 1;
a += 1;
// line break
bc[ruby]. a = 1
a += 1
// line break
bc[csharp]. Integer a = 1;
a += 1;

generates the following where the code shown is governed by the language selected in the floating top nav

bc[javascript]. var a = 1;
a += 1;

bc[ruby]. a = 1
a += 1

bc[csharp]. Integer a = 1;
a += 1;

Note that if you don't include a full set of languages, or at least provide a @default@ language, then a language selector will appear.  In the example below, no language has been specified for @javascript@.  Select Javascript in the top nav to see what happens when a language is not available.

bc[ruby]. # this is ruby

bc[csharp]. // this is C#

h4. Isolated language blocks (always present) versus grouped language blocks

For both code blocks, if a single language code block appears without another contiguous language block before or after it, then it will always be shown regardless of the current language selected by the viewer.  This is to ensure that should you wish to show a simple HTML block or a Javascript code block with formatting for example, this can be done without worrying it will be hidden.  For example:

bc[text]. bc[html]. <html>
<body></body>
</html>

Will always be visible as follows:

bc[html]. <html>
<body></body>
</html>

h4. Non-formatted mono-spaced code blocks

If you want to provide a non-formatted mono-spaced box with code, then use a pre. block instead without specifying a language.  This will generate a box styled as follows:

pre. this.code is('mono-spaced')

h3. Language specific content

Within this documentation repository's static site, all language specific content is wrapped in light dotted lines for clarity.  However, when imported into the main Ably website, content will not be wrapped in dotted lines.  Unlike code blocks, if you specify a single language specific block of content, it will only be shown if the language matches.  Single language code blocks in contrast will appear regardless of which language is selected.

Whenever you need to vary the content based on the language selected by the user in the top language navigation, you have the following options available:

h4. Consecutive lines with @tag[lang].@

Whenever the front end detects multiple consecutive @tag.@ markup with a language specified, the front end will automatically show the content related to the selected language, and hide all other languages.  Note that the special language @default@ can be used to provide default copy in the absence of any specific language variation existing.  For example:

bc[text]. p[default]. Default text to appear for all languages not specified
// line break
p[ruby]. Text to appear when Ruby is the chosen language

Will result in:

p[default]. Default text to appear for all languages not specified

p[ruby]. Text to appear when Ruby is the chosen language

h4. Large blocks using @<div lang="[lang]">@

When you need to vary large content blocks by language which can in turn contain any other HTML or Textile markup, you can use @div@ tags with the @lang@ attribute set.

If you do not specify a language block for the current selected language, nothing will be shown to the user.

bc[text]. <div lang="default">
p1. This block will be shown by default
</div>
<div lang="ruby">
p1. This block will be shown when Ruby is selected
</div>

h4. In-line content with @<span lang="[lang]">@

When you need to vary the content by language inline within a paragraph or another element, you can use @span@ tags with the @lang@ attribute set.  For example:

The language @<span lang="javascript">@ javascript @</span>@ @<span lang="ruby">@ ruby @</span>@ is currently being viewed

Results in:

The language <span lang="javascript">javascript</span> <span lang="ruby">ruby</span> is currently being viewed

Here is another examples using an additional default language tag in the format @<span lang="default">@ of all @</span>@:

The language <span lang="javascript">javascript</span> <span lang="ruby">ruby</span> <span lang="default">of all</span> is currently being viewed

h4. Language definition lists

Please refer to Definition lists below for instructions on how to specify a language for definitions and lists.

h4. Supported languages

The supported languages are as follows:

- *language code* := *language name*
<% Ably::DOCUMENTATION_LANGUAGES.each do |lang_code, lang| %>
- <%=lang_code%> := <%=html_escape(lang[:name])%>
<% end %>

If you wish to add support for more languages, please refer to @/lib/documentation_languages.rb@

h3. Definition lists

Definition lists are used frequently to list out parameters to methods, object properties or return values.  They are prefixed and sufficed with a line break, and used as follows:

bc[test]. - value := description
- value 2 := _default description_ description

and renders as:

- value := description
- value 2 := _default description_ description

h4. Language specific definitions

Unfortunately as definition lists do not natively support specifying a language, a "hack" is used to make this work.  Please use the following format:

bc[test]. - value := description
- <div lang="ruby">ruby</div> := a Ruby specific definition
- <div lang="javascript">javascript</div> := a Javascript specific definition


h3. Other custom styles

p(tip). Tips can be shown using the markup @p(tip).@
